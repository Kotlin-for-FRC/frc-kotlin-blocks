# validated: 2024-10-01 TW e53db15a2003 software/advanced-controls/controllers/trapezoidal-profiles.rst
block0: |
  // Creates a new set of trapezoidal motion profile constraints
  // Max velocity of 10 meters per second
  // Max acceleration of 20 meters per second squared
  TrapezoidProfile.Constraints(10.0, 20.0)

block1: |
  // Creates a new state with a position of 5 meters
  // and a velocity of 0 meters per second
  TrapezoidProfile.State(5.0, 0.0)

block2: |
  // Creates a new TrapezoidProfile
  // Profile will have a max vel of 5 meters per second
  // Profile will have a max acceleration of 10 meters per second squared
  val profile = TrapezoidProfile(TrapezoidProfile.Constraints(5.0, 10.0))

block3: |
  // Profile will start stationary at zero position
  // Profile will end stationary at 5 meters
  // Returns the motion profile state after 5 seconds of motion
  profile.calculate(5.0, TrapezoidProfile.State(0.0, 0.0), TrapezoidProfile.State(5.0, 0.0))

block4: |
  val setpoint = profile.calculate(elapsedTime, initialState, goalState)
  // encoder.distance replaces getDistance() via property access syntax
  controller.calculate(encoder.distance, setpoint.position)

block5: |
  private const val DT = 0.02
  class Robot : TimedRobot() {
      private val m_joystick = Joystick(1)
      private val m_motor = ExampleSmartMotorController(1)
  
      // Note: These gains are fake, and will have to be tuned for your robot.
      private val m_feedforward = SimpleMotorFeedforward(1.0, 1.5)
  
      // Create a motion profile with the given maximum velocity and maximum
      // acceleration constraints for the next setpoint.
      private val m_profile = TrapezoidProfile(TrapezoidProfile.Constraints(1.75, 0.75))
      private var m_goal = TrapezoidProfile.State()
      private var m_setpoint = TrapezoidProfile.State()
  
      override fun robotInit() {
          // Note: These gains are fake, and will have to be tuned for your robot.
          m_motor.setPID(1.3, 0.0, 0.7)
      }
  
      override fun teleopPeriodic() {
          when {
              m_joystick.getRawButtonPressed(2) -> m_goal = TrapezoidProfile.State(5.0, 0.0)
              m_joystick.getRawButtonPressed(3) -> m_goal = TrapezoidProfile.State()
          }
  
          // Retrieve the profiled setpoint for the next timestep. This setpoint moves
          // toward the goal while obeying the constraints.
          m_setpoint = m_profile.calculate(DT, m_setpoint, m_goal)
  
          // Send setpoint to offboard controller PID
          m_motor.setSetpoint(
              ExampleSmartMotorController.PIDMode.kPosition,
              m_setpoint.position,
              m_feedforward.calculate(m_setpoint.velocity) / 12.0
          )
      }
  }

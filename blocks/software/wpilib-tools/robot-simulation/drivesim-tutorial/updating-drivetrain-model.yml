"block0": |-
  private PWMSparkMax m_leftMotor = new PWMSparkMax(0);
     private PWMSparkMax m_rightMotor = new PWMSparkMax(1);
     public Drivetrain() {
       ...
       m_leftEncoder.setDistancePerPulse(2 * Math.PI * kWheelRadius / kEncoderResolution);
       m_rightEncoder.setDistancePerPulse(2 * Math.PI * kWheelRadius / kEncoderResolution);
     }
     public void simulationPeriodic() {
       // Set the inputs to the system. Note that we need to convert
       // the [-1, 1] PWM signal to voltage by multiplying it by the
       // robot controller voltage.
       m_driveSim.setInputs(m_leftMotor.get() * RobotController.getInputVoltage(),
                            m_rightMotor.get() * RobotController.getInputVoltage());
       // Advance the model by 20 ms. Note that if you are running this
       // subsystem in a separate thread or have changed the nominal timestep
       // of TimedRobot, this value needs to match it.
       m_driveSim.update(0.02);
       // Update all of our sensors.
       m_leftEncoderSim.setDistance(m_driveSim.getLeftPositionMeters());
       m_leftEncoderSim.setRate(m_driveSim.getLeftVelocityMetersPerSecond());
       m_rightEncoderSim.setDistance(m_driveSim.getRightPositionMeters());
       m_rightEncoderSim.setRate(m_driveSim.getRightVelocityMetersPerSecond());
       m_gyroSim.setAngle(-m_driveSim.getHeading().getDegrees());
     }

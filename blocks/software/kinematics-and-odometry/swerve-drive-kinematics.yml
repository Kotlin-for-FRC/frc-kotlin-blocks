# validated: 2024-10-03 TW 52cda447a46a software/kinematics-and-odometry/swerve-drive-kinematics.rst
block0: |
  // Locations for the swerve drive modules relative to the robot center.
  val m_frontLeftLocation = Translation2d(0.381, 0.381)
  val m_frontRightLocation = Translation2d(0.381, -0.381)
  val m_backLeftLocation = Translation2d(-0.381, 0.381)
  val m_backRightLocation = Translation2d(-0.381, -0.381)
  // Creating my kinematics object using the module locations
  val m_kinematics = SwerveDriveKinematics(
    m_frontLeftLocation,
    m_frontRightLocation,
    m_backLeftLocation,
    m_backRightLocation,
  )

block1: |
  // Example chassis speeds: 1 meter per second forward, 3 meters
  // per second to the left, and rotation at 1.5 radians per second
  // counterclockwise.
  val speeds = ChassisSpeeds(1.0, 3.0, 1.5)
  // Convert to module states
  val moduleStates = kinematics.toSwerveModuleStates(speeds);
  // Front left module state
  val frontLeft = moduleStates[0]
  // Front right module state
  val frontRight = moduleStates[1]
  // Back left module state
  val backLeft = moduleStates[2]
  // Back right module state
  val backRight = moduleStates[3]

block2: |
  var frontLeftOptimized = SwerveModuleState.optimize(frontLeft, Rotation2d(m_turningEncoder.getDistance()))

block3: |
  var currentAngle = Rotation2d.fromRadians(m_turningEncoder.distance)
  var frontLeftOptimized = SwerveModuleState.optimize(frontLeft, currentAngle)
  frontLeftOptimized.speedMetersPerSecond *= frontLeftOptimized.angle.minus(currentAngle).cos

block4: |
  // The desired field relative speed here is 2 meters per second
  // toward the opponent's alliance station wall, and 2 meters per
  // second toward the left field boundary. The desired rotation
  // is a quarter of a rotation per second counterclockwise. The current
  // robot angle is 45 degrees.
  ChassisSpeeds speeds = ChassisSpeeds.fromFieldRelativeSpeeds(
    2.0, 2.0, Math.PI / 2.0, Rotation2d.fromDegrees(45.0))
  // Now use this in our kinematics
  val moduleStates = kinematics.toSwerveModuleStates(speeds)

block5: |
  // Example module states
  val frontLeftState = SwerveModuleState(23.43, Rotation2d.fromDegrees(-140.19))
  val frontRightState = SwerveModuleState(23.43, Rotation2d.fromDegrees(-39.81))
  val backLeftState = SwerveModuleState(54.08, Rotation2d.fromDegrees(-109.44))
  val backRightState = SwerveModuleState(54.08, Rotation2d.fromDegrees(-70.56))
  // Convert to chassis speeds
  val chassisSpeeds = kinematics.toChassisSpeeds(
    frontLeftState, frontRightState, backLeftState, backRightState)
  // Getting individual speeds
  val forward = chassisSpeeds.vxMetersPerSecond
  val sideways = chassisSpeeds.vyMetersPerSecond
  val angular = chassisSpeeds.omegaRadiansPerSecond

block6: |
  class Example {
      // Start publishing an array of module states with the "/SwerveStates" key
    private val publisher = NetworkTableInstance.getDefault()
        .getStructArrayTopic("/SwerveStates", SwerveModuleState.struct)
        .publish()
  
    fun periodic() {
      // Periodically send a set of module states
      publisher.set(arrayOf{
        frontLeftState,
        frontRightState,
        backLeftState,
        backRightState
      });
    }
  }

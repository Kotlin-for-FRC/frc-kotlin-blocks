block0: |2-
        public class Example {
          final NetworkTableEntry yEntry;
          final NetworkTableEntry outEntry;
          public Example() {
            NetworkTableInstance inst = NetworkTableInstance.getDefault();
            // get the subtable called "datatable"
            NetworkTable datatable = inst.getTable("datatable");
            // get the entry in "datatable" called "Y"
            yEntry = datatable.getEntry("Y");
            // get the entry in "datatable" called "Out"
            outEntry = datatable.getEntry("Out");
          }
          public void periodic() {
            // read a double value from Y, and set Out to that value multiplied by 2
            double value = yEntry.getDouble(0.0);  // default to 0
            outEntry.setDouble(value * 2);
          }
        }
block1: |2-
        public class Example {
          final DoubleSubscriber ySub;
          final DoublePublisher outPub;
          public Example() {
            NetworkTableInstance inst = NetworkTableInstance.getDefault();
            // get the subtable called "datatable"
            NetworkTable datatable = inst.getTable("datatable");
            // subscribe to the topic in "datatable" called "Y"
            // default value is 0
            ySub = datatable.getDoubleTopic("Y").subscribe(0.0);
            // publish to the topic in "datatable" called "Out"
            outPub = datatable.getDoubleTopic("Out").publish();
          }
          public void periodic() {
            // read a double value from Y, and set Out to that value multiplied by 2
            double value = ySub.get();
            outPub.set(value * 2);
          }
          // often not required in robot code, unless this class doesn't exist for
          // the lifetime of the entire robot program, in which case close() needs to be
          // called to stop subscribing
          public void close() {
            ySub.close();
            outPub.close();
          }
        }

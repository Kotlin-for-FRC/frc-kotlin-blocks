block0: |2-
          public class Example {
            final DoubleSubscriber ySub;
            double prev;
            public Example() {
              // get the default instance of NetworkTables
              NetworkTableInstance inst = NetworkTableInstance.getDefault();
              // get the subtable called "datatable"
              NetworkTable datatable = inst.getTable("datatable");
              // subscribe to the topic in "datatable" called "Y"
              ySub = datatable.getDoubleTopic("Y").subscribe(0.0);
            }
            public void periodic() {
              // get() can be used with simple change detection to the previous value
              double value = ySub.get();
              if (value != prev) {
                prev = value;  // save previous value
                System.out.println("X changed value: " + value);
              }
              // readQueueValues() provides all value changes since the last call;
              // this way it's not possible to miss a change by polling too slowly
              for (double iterVal : ySub.readQueueValues()) {
                System.out.println("X changed value: " + iterVal);
              }
              // readQueue() is similar to readQueueValues(), but provides timestamps
              // for each change as well
              for (TimestampedDouble tsValue : ySub.readQueue()) {
                System.out.println("X changed value: " + tsValue.value + " at local time " + tsValue.timestamp);
              }
            }
            // may not be necessary for robot programs if this class lives for
            // the length of the program
            public void close() {
              ySub.close();
            }
          }
block1: |2-
          public class Example {
            final DoubleSubscriber ySub;
            // use an AtomicReference to make updating the value thread-safe
            final AtomicReference<Double> yValue = new AtomicReference<Double>();
            // retain listener handles for later removal
            int connListenerHandle;
            int valueListenerHandle;
            int topicListenerHandle;
            public Example() {
              // get the default instance of NetworkTables
              NetworkTableInstance inst = NetworkTableInstance.getDefault();
              // add a connection listener; the first parameter will cause the
              // callback to be called immediately for any current connections
              connListenerHandle = inst.addConnectionListener(true, event -> {
                if (event.is(NetworkTableEvent.Kind.kConnected)) {
                  System.out.println("Connected to " + event.connInfo.remote_id);
                } else if (event.is(NetworkTableEvent.Kind.kDisconnected)) {
                  System.out.println("Disconnected from " + event.connInfo.remote_id);
                }
              });
              // get the subtable called "datatable"
              NetworkTable datatable = inst.getTable("datatable");
              // subscribe to the topic in "datatable" called "Y"
              ySub = datatable.getDoubleTopic("Y").subscribe(0.0);
              // add a listener to only value changes on the Y subscriber
              valueListenerHandle = inst.addListener(
                  ySub,
                  EnumSet.of(NetworkTableEvent.Kind.kValueAll),
                  event -> {
                    // can only get doubles because it's a DoubleSubscriber, but
                    // could check value.isDouble() here too
                    yValue.set(event.valueData.value.getDouble());
                  });
              // add a listener to see when new topics are published within datatable
              // the string array is an array of topic name prefixes.
              topicListenerHandle = inst.addListener(
                  new String[] { datatable.getPath() + "/" },
                  EnumSet.of(NetworkTableEvent.Kind.kTopic),
                  event -> {
                    if (event.is(NetworkTableEvent.Kind.kPublish)) {
                      // topicInfo.name is the full topic name, e.g. "/datatable/X"
                      System.out.println("newly published " + event.topicInfo.name);
                    }
                  });
            }
            public void periodic() {
              // get the latest value by reading the AtomicReference; set it to null
              // when we read to ensure we only get value changes
              Double value = yValue.getAndSet(null);
              if (value != null) {
                System.out.println("got new value " + value);
              }
            }
            // may not be needed for robot programs if this class exists for the
            // lifetime of the program
            public void close() {
              NetworkTableInstance inst = NetworkTableInstance.getDefault();
              inst.removeListener(topicListenerHandle);
              inst.removeListener(valueListenerHandle);
              inst.removeListener(connListenerHandle);
              ySub.close();
            }
          }

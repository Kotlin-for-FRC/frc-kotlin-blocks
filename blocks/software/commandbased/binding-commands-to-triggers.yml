block0: |
    val exampleCommandController = CommandXboxController(1) // Creates a CommandXboxController on port 1.
    val xButton = exampleCommandController.x() // Creates a Trigger object for the `X` button on exampleCommandController

block1: |
    val exampleController = XboxController(2) // Creates an XboxController on port 2.
    val yButton = JoystickButton(exampleController, XboxController.Button.kY.value) // Creates a JoystickButton object for the `Y` button on exampleController

block2: |
    val limitSwitchOne = DigitalInput(3) // Limit switch on DIO 3
    val limitSwitchTwo = DigitalInput(2)
    val exampleTrigger = Trigger { limitSwitchOne.get() && limitSwitchTwo.get() }

block3: |
    exampleButton
        // Binds a FooCommand to be scheduled when the button is pressed
        .onTrue(FooCommand())
        // Binds a BarCommand to be scheduled when that same button is released
        .onFalse(BarCommand())

block4: |
    // Binds an ExampleCommand to be scheduled when both the 'X' and 'Y' buttons of the driver gamepad are pressed
    exampleCommandController.x()
        .and(exampleCommandController.y())
        .onTrue(ExampleCommand())

block5: |
    // debounces exampleButton with a 0.1s debounce time, rising edges only
    exampleButton.debounce(0.1).onTrue(ExampleCommand())
    // debounces exampleButton with a 0.1s debounce time, both rising and falling edges
    exampleButton.debounce(0.1, Debouncer.DebounceType.kBoth).onTrue(ExampleCommand())

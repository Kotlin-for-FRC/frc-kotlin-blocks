# validated: 2024-10-07 TW e53db15a2003 software/hardware-apis/sensors/accelerometers-software.rst
block0: |
  // Creates an analog accelerometer on analog input 0
  val accelerometer =
      AnalogAccelerometer(0).apply {
        // Sets the sensitivity of the accelerometer to 1 volt per G
        setSensitivity(1.0)
        // Sets the zero voltage of the accelerometer to 3 volts
        setZero(3.0)
      }
  // Gets the current acceleration
  val accel = accelerometer.getAcceleration()

block1: |
  // Sets the accelerometer to measure between -8 and 8 G's
  accelerometer.setRange(BuiltInAccelerometer.Range.k8G)

block2: |
  // Creates an ADXL345 accelerometer object on the MXP I2C port
  // with a measurement range from -8 to 8 G's
  val accelerometer = ADXL345_I2C(I2C.Port.kMXP, ADXL345_I2C.Range.k8G)

block3: |
  // Creates an ADXL345 accelerometer object on the MXP SPI port
  // with a measurement range from -8 to 8 G's
  val accelerometer = ADXL345_SPI(SPI.Port.kMXP, ADXL345_SPI.Range.k8G)

block4: |
  // Creates an ADXL362 accelerometer object on the MXP SPI port
  // with a measurement range from -8 to 8 G's
  val accelerometer = ADXL362(SPI.Port.kMXP, ADXL362.Range.k8G)

block5: |
  // Creates an object for the built-in accelerometer
  // Range defaults to +- 8 G's
  val accelerometer = BuiltInAccelerometer()

block6: |
  val prevXAccel = 0.0
  val prevYAccel = 0.0
  val accelerometer = BuiltInAccelerometer()
  override fun robotPeriodic() {
      // Gets the current accelerations in the X and Y directions
      val xAccel = accelerometer.x
      val yAccel = accelerometer.y
      // Calculates the jerk in the X and Y directions
      // Divides by .02 because default loop timing is 20ms
      val xJerk = (xAccel - prevXAccel) / 0.02
      val yJerk = (yAccel - prevYAccel) / 0.02
      prevXAccel = xAccel
      prevYAccel = yAccel
  }

block7: |
  val accelerometer = BuiltInAccelerometer()
  // Create a LinearFilter that will calculate a moving average of the measured X acceleration over the past 10 iterations of the main loop
  val xAccelFilter = LinearFilter.movingAverage(10)
  override fun robotPeriodic() {
      // Get the filtered X acceleration
      val filteredXAccel = xAccelFilter.calculate(accelerometer.x)
  }

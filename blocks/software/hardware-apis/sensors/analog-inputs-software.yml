# validated: 2024-10-07 TW e53db15a2003 software/hardware-apis/sensors/analog-inputs-software.rst
block0: |
  // Initializes an AnalogInput on port 0
  val analog = AnalogInput(0)

block1: |
  // Sets the AnalogInput to 4-bit oversampling.  16 samples will be added together.
  // Thus, the reported values will increase by about a factor of 16, and the update
  // rate will decrease by a similar amount.
  analog.oversampleBits = 4

block2: |
  // Sets the AnalogInput to 4-bit averaging.  16 samples will be averaged together.
  // The update rate will decrease by a factor of 16.
  analog.averageBits = 4

block3: |
  analog.getValue()

block4: |
  analog.voltage

block5: |
  analog.averageValue

block6: |
  analog.averageVoltage

block7: |
  // Sets the initial value of the accumulator to 0
  // This is the "starting point" from which the value will change over time
  analog.setAccumulatorInitialValue(0)
  // Sets the "center" of the accumulator to 0.  This value is subtracted from
  // all measured values prior to accumulation.
  analog.setAccumulatorCenter(0)
  // Returns the number of accumulated samples since the accumulator was last started/reset
  analog.accumulatorCount
  // Returns the value of the accumulator.  Return type is long.
  analog.accumulatorValue
  // Resets the accumulator to the initial value
  analog.resetAccumulator()

block8: |
  // Instantiate an AccumulatorResult object to hold the matched measurements
  val result = AccumulatorResult()
  // Fill the AccumulatorResult with the matched measurements
  analog.getAccumulatorOutput(result)
  // Read the values from the AccumulatorResult
  val count = result.count
  val value = result.value

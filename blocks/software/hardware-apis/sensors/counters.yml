block0: |2-
      // Create a new Counter object in two-pulse mode
      Counter counter = new Counter(Counter.Mode.k2Pulse);
      @Override
      public void robotInit() {
          // Set up the input channels for the counter
          counter.setUpSource(1);
          counter.setDownSource(2);
          // Set the decoding type to 2X
          counter.setUpSourceEdge(true, true);
          counter.setDownSourceEdge(true, true);
      }
block1: |2-
      // Create a new Counter object in two-pulse mode
      Counter counter = new Counter(Counter.Mode.kSemiperiod);
      @Override
      public void robotInit() {
          // Set up the input channel for the counter
          counter.setUpSource(1);
          // Set the encoder to count pulse duration from rising edge to falling edge
          counter.setSemiPeriodMode(true);
      }
block10: |2-
      // Gets the last direction in which the counter moved
      counter.getDirection();
block11: |2-
      // returns the current period in seconds
      counter.getPeriod();
block12: |2-
      // Resets the encoder to read a distance of zero
      counter.reset();
block2: |2-
      // Return the measured pulse width in seconds
      counter.getPeriod();
block3: |2-
      // Create a new Counter object in two-pulse mode
      Counter counter = new Counter(Counter.Mode.kPulseLength);
      @Override
      public void robotInit() {
          // Set up the input channel for the counter
          counter.setUpSource(1);
          // Set the decoding type to 2X
          counter.setUpSourceEdge(true, true);
          // Set the counter to count down if the pulses are longer than .05 seconds
          counter.setPulseLengthMode(.05)
      }
block4: |2-
      // Create a new Counter object in two-pulse mode
      Counter counter = new Counter(Counter.Mode.kExternalDirection);
      @Override
      public void robotInit() {
          // Set up the input channels for the counter
          counter.setUpSource(1);
          counter.setDownSource(2);
          // Set the decoding type to 2X
          counter.setUpSourceEdge(true, true);
      }
block5: |2-
      // Configures the counter to return a distance of 4 for every 256 pulses
      // Also changes the units of getRate
      counter.setDistancePerPulse(4./256.);
      // Configures the counter to consider itself stopped after .1 seconds
      counter.setMaxPeriod(.1);
      // Configures the counter to consider itself stopped when its rate is below 10
      counter.setMinRate(10);
      // Reverses the direction of the counter
      counter.setReverseDirection(true);
      // Configures an counter to average its period measurement over 5 samples
      // Can be between 1 and 127 samples
      counter.setSamplesToAverage(5);
block6: |2-
      // returns the current count
      counter.get();
block7: |2-
      // returns the current distance
      counter.getDistance();
block8: |2-
      // Gets the current rate of the counter
      counter.getRate();
block9: |2-
      // Gets whether the counter is stopped
      counter.getStopped();
